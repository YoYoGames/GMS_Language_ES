
  
  Errores de sintaxis
  El primer nivel de información de errores al programar tus juegos en GameMaker Studio 2 está en el editor de código o DnD™, y es el comprobador de sintaxis. A medida que vayas enderezando tu código -o añadiendo tus acciones
    - GameMaker comprobará que sigue la sintaxis establecida para el lenguaje, y marcará cualquier problema que encuentre para que puedas corregirlo antes de ejecutar el juego o compilar un ejecutable.
  Estos errores se dividen en dos categorías principales:
  
     Advertencias: Estas se muestran para cosas que pueden ser un error, pero pueden no serlo, y probablemente no detendrán
      el juego de la compilación, pero podría provocar errores en tiempo de ejecución. Las causas más comunes de estas advertencias es cuando una variable se utiliza en una expresión y no se ha definido todavía en cualquier otro lugar, o cuando una variable se ha definido, pero no ha
      ha sido utilizada.
     Errores: Estos son problemas que no permiten que el juego se compile, y mucho menos que se ejecute.
      Deben solucionarse antes de seguir trabajando con el código. La siguiente tabla muestra las causas más comunes de estos.
  
  Los errores de sintaxis se actualizarán a medida que escriba su código (habrá una breve pausa entre el momento en que escriba algo y los errores que aparezcan en esta ventana para evitar que se informen errores por código inacabado), y seguirán el formato:
  [objeto] - [evento] - [número de línea] - [posición en la línea]: [cadena de error]
  O si el error está en un script, lo será:
  [script] - [Número de línea] - [Posición en la línea]: [cadena de error]
  Haciendo doble clic en  sobre cualquiera de los errores que se muestran en la consola de salida, le llevará a la línea del evento del objeto o del script que tiene el error para que pueda
    para que pueda editarlo.
  Debe tenerse en cuenta que algunos de estos errores se mostrarán en lugares específicos de su código, pero el error real puede ser causado por algo en otra parte, o un solo problema puede provocar múltiples mensajes de error:
  En la imagen anterior, los tres errores de  han sido provocados por un único error: el uso de dos puntos y medio ";" en lugar de una coma "," en la línea 220 para la función variable_instance_exists().
  La siguiente tabla enumera los diferentes errores de sintaxis y sus principales causas:
   
  
    
      
        Error
         Tipo 
        Descripción
      
      
        Referencia malformada [val]
        
        Esto significa que hay un error interno de validación AST (no debería ver nunca este error, pero si lo ve, por favor considere presentar un informe de error desde el menú de ayuda) 
      
      
        Secuencia de escape de caracteres hexadecimales malformada 
        
        Esto puede ocurrir cuando se ha utilizado el valor hexadecimal para un carácter de escape en una cadena y éste tiene un formato incorrecto.
      
      
        Nodo inesperado [val]
        
        Esto significa que hay un error interno de validación AST (no debería ver nunca este error, pero si lo ve, por favor considere presentar un informe de error desde el menú de ayuda) 
      
      
        Excepción al analizar [val]
        
        Esto significa que hay un error interno de validación AST (no debería ver nunca este error, pero si lo ve, por favor considere presentar un informe de error desde el menú de ayuda) 
      
      
        Referencia de identificación malformada [val]
        
         
      
      
        Expresión innecesaria [val] utilizada como declaración
        
        Este error se produce cuando el corrector sintáctico detecta una expresión (mostrada en [val]) donde esperaba una sentencia. Por ejemplo, el siguiente código arrojará el error ya que espera el operador ternario ? pero encuentra 32:
          temp_x = x < (room_width / 2)  32: room_width - 32;
      
      
        Referencia de matriz malformada [val]
        
        Esto significa que has intentado referenciar un array de forma incorrecta, y [val] mostrará la referencia.
      
      
        Operador binario inesperado [val]
        
        Este error se produce cuando se utiliza uno de los operadores bitwise en un lugar en el que no debería ser utilizado, con [val] mostrando dónde.
      
      
        Cadena literal no terminada
        
        Este error se produce cuando se abre una cadena con @“ o “ pero no se cierra antes del final del código.
      
      
        Las comillas simples ya no están permitidas para la cadena
        
        Este error se produce cuando se intentan utilizar cadenas envueltas en comillas simples, por ejemplo: 'Hola Mundo', en lugar de comillas dobles, por ejemplo: "Hola Mundo".
      
      
        Error de sintaxis inesperado
        
        Este error denota un error de sintaxis que el analizador sintáctico no es capaz de identificar más específicamente.
      
      
        Tengo "[val1]", esperaba "[val2]"
        
        Esto sucede cuando el verificador de sintaxis espera algún valor o símbolo pero obtiene uno diferente, donde [val1] es el símbolo o valor actual, y [val2] es el símbolo o valor esperado. Por ejemplo:
          Got "{", expected "("
      
      
        Tengo "[val1]", esperaba "[val2]" o "[val3]"
        
        Como en el caso anterior, pero para cuando hay varios símbolos esperados posibles.
      
      
        Expresión esperada
        
        Este error se produce cuando el comprobador de sintaxis espera una expresión pero no se da ninguna.
      
      
        Declaración [val] vacía
        
        Esto ocurre cuando se termina una sentencia y se deja vacía. Por ejemplo, el siguiente código dará el error (nótese el punto y coma final):
          if (x < 0);
      
      
        No se permiten las llamadas a funciones anidadas
        
        Esto puede ocurrir cuando se intenta anidar llamadas a funciones dentro de una sentencia, por ejemplo
          ds_list_find_value(list, 0)).sprite_index
      
      
        El uso de [val] no está permitido en la versión de prueba de GameMaker Studio 2 
        
        Este mensaje significa que la función o el símbolo mostrado para [val] no está disponible para su uso bajo la licencia de prueba de GameMaker Studio 2.
      
      
        Número de argumentos para la función [val1] esperada [val2] obtuvo val[3]
        
        Este error le indica que no ha suministrado el número correcto de argumentos a la función mostrada para [val1], que espera el número mostrado en [val2] pero obtuvo los mostrados en [val3].
      
      
        Número de argumentos para la función [val1] esperado [val2] - [val3] obtenido [val4]
        
        Como en el caso anterior, sólo para un rango de argumentos.
      
      
        Se ha encontrado una entrada duplicada en el enum
        
        Este error le indica que ha duplicado un nombre de entrada de una variable enum 
      
      
        Se ha encontrado un duplicado del enum
        
        Este error le indica que ha definido dos o más enums con el mismo nombre.
      
      
        Falta el nombre de la variable en globalvar
        
        Esto le indica que ha utilizado la declaración globalvar pero ha omitido el nombre de la variable.
      
      
        Falta el nombre de la variable en var
        
        Esto le indica que ha utilizado la declaración var pero ha omitido el nombre de la variable.
      
      
        No se ha encontrado ninguna #región que coincida con #endregion
        
        Este error significa que has declarado una región final en tu código, sin definir una región inicial.
      
      
        Se ha encontrado una #región no cerrada al final del script
        
        Este error significa que ha declarado una región en alguna parte del código pero no ha definido una región final en ninguna parte para ella.
      
      
        Operador de terminal inesperado [val]
        
        Esto significa que hay un error interno de validación AST (no debería ver nunca este error, pero si lo ve, por favor considere presentar un informe de error desde el menú de ayuda) 
      
      
        Operador unario inesperado [val]
        
        Esto ocurre cuando un operador unario (como +, -, =, etc...) se ha encontrado en su código en un lugar en el que no se espera, donde [val] le mostrará el operador.
      
      
        Operador ternario inesperado [val]
        
        Este error significa que has utilizado una de las partes del operador ternario de forma incorrecta en alguna parte de tu código, donde [val] muestra la parte que está en error.
      
      
        Try necesita tener una cláusula catch o finally
        
        Este error significa que ha llamado a la función try pero ha omitido incluir una cláusula catch o finally.
      
      
        La macro [val] ya existe
        
        Puede obtener este error cuando intente definir una macro [val] con el mismo nombre que una definida previamente.
      
      
        Referencia variable malformada, obtuvo [val]
        
        Esto significa que hay un error interno de validación AST (no debería ver nunca este error, pero si lo ve, por favor considere presentar un informe de error desde el menú de ayuda) 
      
      
        Asignación a la expresión de igualdad relacional múltiple - GML no admite asignaciones múltiples en una expresión
        
        Este error le indica que hay un problema con una asignación multioperador (también llamada asignación compuesta) que no es compatible con el Lenguaje GameMaker. Esto incluye cosas como "*=" o "/=",
          etc...
      
      
        La macro [val] no se utiliza
        
        Esto ocurre cuando la macro [val] no se utiliza en ninguna parte de su código.
      
      
        Variable [val] sólo referenciada una vez
        
        Esto significa que la variable dada [val] sólo es referenciada una vez en su código.
      
      
        Variable no asignada [val] referenciada
        
        Esto significa que la variable [val] ha sido referenciada en su código, pero no se le ha asignado un valor en ningún lugar previamente.
      
      
        Sólo las funciones declaradas como constructoras pueden utilizar la herencia
        
        Este error le indica que ha intentado utilizar la herencia en una función que no ha sido declarada como constructor.
      
      
        Atributo de función desconocido [val]
        
        Este error significa que ha intentado utilizar un modificador de función no válido o no identificado ([val]) al declarar una función in-kine (un modificador de función es algo parecido a la palabra clave constructor, que sí está soportada). 
      
      
        El argumento heredado "\N"[val]\N no está en los argumentos de la función
        
        Este error se produce cuando se intenta referenciar un argumento en una función heredada que no ha sido declarado en la definición de la función padre.
      
      
        [val] Código de creación
        
        Esto ocurre cuando tienes un error [val] en el código de creación de la sala en alguna parte.
      
    
  
   
   
   
  
    
      
        Atrás: Informe de errores
        Siguiente: Errores del compilador
      
    
    Copyright YoYo Games Ltd. 2021 Todos los derechos reservados
  
  
  

