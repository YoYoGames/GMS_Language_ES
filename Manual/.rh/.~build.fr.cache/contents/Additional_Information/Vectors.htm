
  
  Vectores
  En algún momento, al crear un juego de cualquier complejidad, probablemente tendrás que lidiar con vectores. Se utilizan en física, en IA, en trigonometría y en muchas otras situaciones, pero ¿qué es un vector? Bueno, para decirlo de forma sencilla, un vector es
    una cantidad dirigida. Empecemos por ver un vector de una dimensión -que es lo mismo que un solo número- dibujando una línea numerada con una flecha que empieza en el cero y termina en el 5. Este es el vector "a" que es igual a
    a 5 y si dibujamos otra flecha que empieza en el 5 y termina en el 8 tenemos el vector "b" que es igual a 3:
  Deberías darte cuenta de que no importa dónde empieza un vector, lo único que importa es su longitud y la dirección
    va. Así que el vector "b" comienza en 5, tiene 3 unidades de longitud y apunta a la "derecha", lo que lo hace idéntico a un vector que comienza en 0 y va a 3. Ahora, también puedes sumar estos vectores, poniendo los dos vectores "a"
    y "b" extremo a extremo para obtener el vector "c" que es igual a 8. ¿Qué pasa con los números negativos? Bueno, si en la imagen anterior un vector que apunta a la "derecha" corresponde a un número positivo, puedes ver que un vector
    que apunta a la "izquierda" correspondería a un número negativo, lo que hace que un vector unidimensional no sea más que un número con signo (+/-). Esto explica el concepto esencial de un vector: sólo la longitud y la dirección ("izquierda"
    o "derecha" en este caso) cuentan, no la posición.
  ¿Y qué pasa con los vectores bidimensionales? Bueno, podemos pensar en ellos como si estuvieran formados no sólo por "izquierda" y "derecha", sino también por "arriba" y "abajo":
  Ahora, estos no son realmente vectores todavía, ya que todavía tenemos que reducirlos utilizando sus
    coordenadas iniciales y finales. Mirando el vector "a" podemos ver que tiene una coordenada inicial de [2,2] y una coordenada final de [4,3] y por lo tanto para obtener el vector de esto tenemos que reducirlo restando las coordenadas finales de las coordenadas iniciales
    coordenadas iniciales de esta manera:
  a = [(x2-x1), (y2-y1)] = [(4-2), (3-2)] = [2,1]
  Hagamos ahora lo mismo con el vector b:
  b = [(-1.2 -(-3.2)) ,(2.1 - 1.1)] = [2 ,1]
  ¿Notas algo? Esos dos vectores son iguales! Esta es otra demostración de que un vector no tiene posición, sólo dirección y longitud, y que podemos dibujar esos vectores uno respecto del otro alrededor de un eje local [0,0]:
  Esto significa que un vector 2D está definido por dos valores, una posición "x" y una posición "y" en relación con
    el eje local [0,0]. ¿Y qué pasa con los vectores 3D? Bueno, tienen la dimensión añadida de la "profundidad" y se calculan como posiciones "x", "y" y "z" alrededor de un eje local, algo así:
  Un buen ejemplo de un vector utilizado en GameMaker Studio 2 es la propiedad física de gravedad en el editor de habitaciones. La gravedad de
    gravedad se calcula como un vector alrededor de una posición [0,0]. Así, si usted define la gravedad como [x0, y10], la gravedad sería hacia abajo con una fuerza de 10.
  Normalmente, los vectores se pueden utilizar en muchas situaciones, pero a veces se quiere restringir su valor (como cuando se trata de ángulos), por lo que los normalizamos . Se trata esencialmente de un truco matemático que se utiliza para convertir un vector
    de longitud n a un vector de longitud 1, lo que significa que los componentes del vector se normalizan para estar entre 0 y 1. Estos vectores también se llaman vectores unitarios:
  Para calcular un vector normalizado, primero debemos tener las componentes del vector original, y luego utilizarlas para obtener
    la longitud del vector. A continuación, dividimos cada una de las componentes del vector por esta longitud para obtener las componentes del vector normalizado que forman el vector normalizado en el que la suma de los cuadrados de todas las coordenadas es igual a 1. He aquí
    cómo:
  Primero tomamos las coordenadas del vector y obtenemos las componentes:
  vx = (x2 - x1) = (7 - 1) = 6 vy = (y2 - y1) = (4 - 1) = 3
  A continuación, utilizamos estos valores para calcular la longitud del vector:
  len = sqr(vx2 + vy2); // = sqr(36 + 9) = sqr(45) = 6,708203932499369
  Ahora, eso nos da la longitud exacta del vector "a", así que vamos a utilizarlo para normalizar los dos componentes del vector vx y vy:
  vx = (vx/len); // = (6 / 6,708203932499369) = 0,89442719099159 vy = (vy/len); // = (3 / 6,708203932499369) = 0,4472135954999579
  Genial. Ya hemos normalizado los componentes del vector. Pero, ¿qué utilidad práctica tiene esto en el contexto de GameMaker Studio 2? Bien, vamos a poner un ejemplo práctico...
  Digamos que tienes un juego en el que el jugador tiene que disparar a un enemigo y necesitas saber cuánto tiene que moverse el objeto bala a lo largo del eje x e y en cada paso para darle:
  Para ello, utilizarías las coordenadas del jugador y del enemigo para obtener los componentes del vector y la longitud, luego
    normalizarlos para obtener un valor entre 0 y 1 que finalmente multiplicarías por la velocidad que deseas que la bala viaje en cada paso. Estos dos valores finales se almacenan y se añaden a las coordenadas X e Y iniciales en cada paso.
    ¿Suena complicado? No lo es, mira (los valores se han redondeado a un decimal para simplificar):
  px = 100; py = 425; ex = 356; ey = 83; bullet_speed = 5;
     vx = (ex - px); // = 256 vy = (ey - py); // = -342
     len = sqrt(vx2 + vy2); // = sqrt(65536 + 116964) = 427.2
     vx = vx / len; // = 0.6 vy = vy / len; // = 0.8
     speed_x = vx * bullet_speed; // = 3 speed_y = vy * bullet_speed; // = 4
  Por lo tanto, para dar con el objetivo necesitamos sumar 3 a la coordenada x de la bala y 4 a su coordenada y en cada paso.
   
   
   
  
    
      
        Atrás: Información adicional
        Siguiente: Guía para el uso de buffers
      
    
    Copyright YoYo Games Ltd. 2021 Todos los derechos reservados
  
  
  

