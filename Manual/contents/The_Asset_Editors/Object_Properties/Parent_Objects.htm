<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Objetos de los padres</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing object parenting" />
  <meta name="rh-index-keywords" content="Objects - Parents" />
  <meta name="search-keywords" content="parent,child,inheritance,object parenting" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Objetos de los padres</h1>
  <p>Cuando se trabaja con objetos en el IDE de <span class="notranslate">GameMaker Studio 2</span>, se pueden establecer jerarquías <strong>Padre </strong>/ Hijo. Esto se hace haciendo clic en el botón &quot;Padre&quot; en el editor de objetos y, a continuación, la elección de otro objeto desde el navegador de activos
    para que sea el &quot;padre&quot; del que se está editando:</p>
  <p><img alt="Adding A Parent" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Parent.png">Así pues, cada objeto de tu proyecto de juego puede tener un objeto padre, pero ¿qué significa esto? Bueno, cuando un objeto tiene un padre asignado puede
    compartir código, acciones y eventos con ese padre. Este intercambio se llama &quot;herencia&quot; y un objeto que tiene un padre se llama un objeto &quot;hijo&quot;. Un hijo no sólo puede compartir código con su padre, sino que puede hacer comprobaciones y ejecutar código
    en los objetos padre y automáticamente incluirá los objetos hijo también, lo que ahorra mucho tiempo y energía.</p>
  <p>Si eso suena complicado, otra forma de ver un objeto padre es como una manera de &quot;agrupar&quot; objetos bajo el mismo paraguas y hacer que compartan ciertas cosas sin perder su propia identidad única. Tal vez eso no aclare demasiado las cosas.
    no aclare demasiado las cosas, así que demos algunos ejemplos...</p>
  <p>Digamos que tienes un objeto &quot;jugador&quot; y cuatro objetos &quot;enemigos&quot; diferentes. Ahora, quieres que el jugador muera si toca cualquiera de estos cuatro objetos y esto normalmente implicaría cuatro eventos de colisión diferentes con cuatro conjuntos diferentes de
    acciones o código, uno para cada uno de los objetos enemigos. PERO si hacemos un objeto padre para todos los enemigos, entonces podemos crear un evento de colisión con el objeto padre solamente y se activará sin importar cuál de los cuatro objetos enemigos &quot;hijos&quot; toque al jugador.
    toquen al jugador. Muy útil. En el objeto real de <span class="notranslate">GameMaker Studio</span> 2 verías algo como esto:</p>
  <p><img alt="Parenting For Collisions" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_ParentCollision.png">A la izquierda tenemos cuatro eventos de colisión separados y a la derecha tenemos un único evento de colisión, ya que hemos creado un objeto
    objeto &quot;padre&quot; y le hemos asignado todos los objetos enemigos. Ten en cuenta que un objeto padre no tiene que tener ningún evento o código en él...</p>
  <p>Otro ejemplo de la crianza sería si usted tiene un juego en el que desea crear 10 objetos de aspecto diferente y hacer que todos se comporten de la misma manera. Para ello, crearías un objeto padre y en él tendrías todas tus acciones de comportamiento o código
    en los eventos requeridos, y luego crearías tus diez objetos sin acciones o código, pero con diferentes sprites, y les asignarías tu objeto padre. Ahora, cuando coloques estas instancias en una habitación, todas se comportarán igual, pero se verán diferentes,
    ya que &quot;heredarán&quot; los eventos del padre.</p>
  <p>Por último, puede utilizar la crianza para &quot;mezclar y combinar&quot; eventos y comportamientos. Lo ilustraremos con un último ejemplo... Digamos que quieres dos monstruos: uno que se mueva hacia arriba y hacia abajo, y otro que se mueva hacia la izquierda y hacia la derecha, pero también quieres que los
    dos tengan la misma salud, disparen al jugador y le hagan daño si chocan con ellos. En este caso puedes ver que casi todos los eventos deben tener las mismas acciones, excepto uno o dos que gobiernan el movimiento. Así que, de nuevo, podemos hacer que
    un objeto el padre del otro, pero en este caso también definimos ciertos eventos para el objeto hijo. Estos eventos &quot;anulan&quot; los eventos del padre, lo que significa que cuando un evento del objeto hijo contiene acciones, éstas se ejecutan
    en lugar de las acciones contenidas en el evento del padre. Si también quieres ejecutar el evento padre puedes llamar al evento llamado &quot;heredado&quot; usando la función <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a>,
    o la acción <span class="notranslate">DnD™</span> <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">Llamar Evento Padre</a>.</p>
  <p><img alt="Inheriting Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_InheritEvents.png">A la izquierda, arriba, está el objeto padre con 5 eventos en él, y a la derecha puede ver el objeto &quot;hijo&quot;. El objeto hijo
    también tiene 5 eventos, pero dos de ellos anulan los eventos heredados del padre (los eventos <strong>Step </strong>y <strong>Draw </strong>) y los otros tres están atenuados porque son los eventos heredados del padre. Los eventos heredados
    también tendrán el icono de &quot;anulación del padre&quot; junto a ellos en el Editor de Eventos:</p>
  <p><img alt="Parent Override" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_ParentOverride.png">Cuando haga clic en <img alt="LMB Icon" class="icon" src="../../assets/Images/Icons/Icon_LMB.png"> en un evento que ha sido heredado,
    se abrirá el editor de código para mostrar el código padre heredado, pero no podrás editar este código ya que sólo puedes editarlo en el propio objeto padre. Puedes pulsar el botón derecho del ratón <img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png"> sobre cualquiera de los eventos padre para abrir el siguiente menú de opciones:</p>
  <p><img alt="Parent Event RMB Menu" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_Parent_Menu.png">Aquí puede elegir dos <strong>Abrir </strong>el evento padre para inspeccionar el código, o puede elegir <strong>Heredar </strong>el evento
    evento o <strong>Anular </strong>el evento. Si eliges <strong>Heredar </strong>entonces el editor de código se abrirá con la función <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a> ya
    añadida (o la acción de <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">Llamar Evento Padre</a> si se usa <span class="notranslate">DnD™</span>). Cualquier otro código que coloque en este evento se ejecutará así como el código que el objeto padre
    tiene. Si eliges <strong>Anular </strong>el evento, entonces la ventana de código también se abrirá, sólo que ahora la función <span class="inline">event_inherited()</span> no será llamada, por lo que cualquier cosa que añadas aquí se ejecutará <em>en </em>lugar del código
    en el objeto padre.</p>
  <p class="note"><strong>NOTA</strong>: Desde el editor de código puede navegar rápidamente al objeto padre pulsando el botón derecho del ratón <img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png"> y seleccionando <strong>Ir al objeto</strong> en el menú emergente, o (si el evento ha sido anulado) puede seleccionar <strong>Abrir evento heredado</strong> para ir directamente a un editor de código con el código del evento padre en él.</p>
  <p>Siempre que apuntes a un objeto padre en el código, éste se aplicará también a los &quot;hijos&quot; del objeto padre. Esto sucede cuando, en una acción, se indica que la acción debe aplicarse a las instancias de un determinado objeto, y en el código
    ocurre cuando se utiliza la sentencia <a href="../../GameMaker_Language/GML_Overview/Language_Features/with.htm"><span class="inline">with()</span></a> de la sentencia. También funcionará así cuando llames a funciones de código, como <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_position.htm"><span class="inline">instance_position()</span></a>,
    <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>etc... en las que -si se suministra un objeto padre- todas las instancias del padre <em>y del </em>hijo
    se incluirán en las comprobaciones. Por último, el parenting funciona también cuando haces referencia a variables de otros objetos, como en el ejemplo del monstruo anterior, si pongo la velocidad del enemigo 1 a 10, entonces la velocidad del enemigo 2 también se pondrá a diez, ya que es un objeto hijo del enemigo
    1.</p>
  <p>Generalmente se considera una buena práctica en la mayoría de los casos crear un objeto padre base y hacer que este objeto base contenga todo el comportamiento por defecto, pero nunca utilizar una instancia del mismo en el juego. En lugar de ello, utilice todos los objetos hijos y sólo utilice el objeto padre en
    situaciones como las que he descrito anteriormente, para colisiones, para referenciar variables, etc... También debes saber que los padres también pueden tener padres. Obviamente no puedes crear un ciclo de &quot;padre 1 es hijo de padre 2 es hijo de padre
    1&quot; pero puedes crear lo que se llama &quot;jerarquía de objetos&quot; donde &quot;padre3 es hijo de<em>padre2 </em>es hijo de <em>padre1&quot; </em>. Esto es extremadamente útil para mantener su juego estructurado y se recomienda encarecidamente
    aprender a utilizar este mecanismo.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="../Objects.htm">El editor de objetos</a></div>
        <div style="float:right">Siguiente: <a href="Physics_Objects.htm">Objetos de Física</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Parent Objects
Child Objects
parent
child
inheritance
-->
  <!-- TAGS
parent_objects
-->
</body>
</html>