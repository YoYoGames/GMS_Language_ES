<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Guía de primitivos y construcción de vértices</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how to set up and use primitives and vertex buffers" />
  <meta name="rh-index-keywords" content="Guide To Primitives And Vertex Building" />
  <meta name="search-keywords" content="primitive building,primitives,vertex,vertex buffers,vertex formats" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Guía de primitivos y construcción de vértices</h1>
  <p>Esta guía cubre brevemente cómo construir y utilizar <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">primitivas</a> usando <strong>formatos de vértices</strong> personalizados y <strong>buffers de vértices</strong>. </p>
  <p>En general, cuando empiezas a trabajar con 3D, efectos especiales, procesos de dibujo complejos o <span class="notranslate">shaders</span> no necesitas preocuparte demasiado por el formato de vértices que se utiliza, ya que GameMaker <span class="notranslate">Studio 2</span> configurará y pasará automáticamente los datos de vértices por ti. Sin embargo, a veces es necesario crear tus propios datos de vértices y formatearlos a tu gusto, especialmente cuando necesitas aumentar la velocidad, o deseas pasar información extra. Por ejemplo, el formato estándar de vértices
    incluye una posición 3D x, y, z, color (con alfa), y coordenadas de textura UV, que, si lo creas tú mismo, sería algo así:</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> my_format = vertex_format_end();</p>
  <p>Sin embargo, si sólo estás usando (por ejemplo) un <span class="notranslate">shader</span> para manipular la posición del vértice, entonces no habría necesidad de pasar por los datos de color o textura. En este caso, usted crearía su propio formato así:</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> my_format = vertex_format_end();</p>
  <p>En total, hay cinco atributos de vértice diferentes que puedes utilizar al definir un formato de vértice:</p>
  <ul class="colour">
    <li>Color</li>
    <li>Normal</li>
    <li>Posición</li>
    <li>Posición 3D</li>
    <li>Coordenadas de la textura</li>
  </ul>
  <p>En general, <em>siempre</em> debe proporcionar la posición o la posición 3D como parte del formato, pero todos los demás son opcionales.</p>
  <p>Debe tener en cuenta que una vez que haya creado su formato de vértice, el orden en el que ha definido los atributos de vértice <i>debe ser respetado</i> al construir sus <strong>primitivas</strong>. Así, si has definido un formato de vértice como posición, color
    y coordenada de textura, entonces <b> <i>debes</i></b> añadir estos atributos a la primitiva en el mismo orden, de lo contrario obtendrás un error. También hay que tener en cuenta que, como cualquier otro recurso dinámico, un formato de vértice requiere memoria y por lo tanto debe ser eliminado
    cuando no se necesita utilizando la función <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm"><tt>vertex_format_delete()</tt></a>.</p>
  <p>Las primitivas que construyas se guardan en un <b>buffer de vértices</b>. Este debe ser creado de antemano y luego referenciado por las funciones que se utilizan para construir su primitiva. El buffer de vértices puede ser reutilizado tantas veces como sea necesario para crear diferentes
    primitivas, o puede ser &quot;congelado&quot; para mantener un tipo específico de primitiva para la duración de su juego o nivel (que es el enfoque más rápido, por lo que si usted sabe que una primitiva que se construye no va a cambiar, entonces siempre debe utilizar esta opción).</p>
  <p>En el siguiente código se muestra un ejemplo de construcción de una primitiva de triángulo simple:</p>
  <p class="code">// CREATE EVENT<br> v_buff = vertex_create_buffer();<br> vertex_begin(v_buff, global.my_format);<br> vertex_position(v_buff, 10, 10);<br> vertex_colour(v_buff, c_white, 1);<br> vertex_texcoord(v_buff, 0, 0);<br> vertex_position(v_buff, 110, 10);<br> vertex_colour(v_buff, c_white, 1); <br> vertex_coord(v_buff, 1, 0);<br> vertex_position(v_buff, 110, 110);<br> vertex_colour(v_buff, c_white, 1);<br> vertex_texcoord(v_buff, 1, 1);<br> vertex_end(v_buff);
    <br>
    <br> // DRAW EVENT<br> var tex = sprite_get_texture(spr_Background, 0);<br> <span class="notranslate">shader_set</span>(shd_shimmer);
    <br> vertex_submit(v_buff, pr_trianglelist, tex);<br> <span class="notranslate">shader_reset</span>();
  </p>
  <p>Aquí tenemos primero que crear nuestro buffer de vértices en el evento Create de la instancia, luego comenzamos la definición de los diferentes vértices que componen nuestra primitiva triangular, dando la posición, el color y la coordenada UV de la textura para cada uno de los
    tres puntos que queremos utilizar. A continuación, terminamos la definición de los vértices, y sabemos que el buffer de vértices con estos datos se almacena en la variable &quot;v_buff&quot;.  </p>
  <p class="note"><strong>NOTA</strong>: Si el contenido del buffer se va a actualizar constantemente, el buffer se crearía, se le darían los datos de los vértices, y luego se destruiría de nuevo - después de haber sido dibujado - todo en el mismo paso.</p>
  <p>A continuación, dibujamos el contenido del búfer de vértices en el evento de dibujo utilizando un <span class="notranslate">shader</span>. Este es un ejemplo muy simple, y es básicamente cómo <span class="notranslate">GameMaker Studio 2</span> funciona internamente, es decir: Cuando se dibuja un sprite, <span class="notranslate">GameMaker</span> crea un buffer de vértices con cuatro vértices
    creando dos triángulos (que forman un cuadrado, también llamado &quot;quad&quot;), y texturiza estos dos triángulos con la imagen del sprite. Cuando dibujamos este sprite, estamos enviando el buffer de vértices y su contenido se dibuja en la pantalla.</p>
  <p>Notarás que cuando enviamos el buffer de vértices para dibujar, suministramos un tipo de primitiva. El tipo de primitiva que se utiliza puede ser un punto, una lista o tira de líneas, o una lista o tira de triángulos, pero <i>no</i> se permiten los abanicos de triángulos ya que la mayoría del hardware móvil
    no aceptan ese tipo de primitiva. No olvides formatear tu buffer de vértices correctamente para el tipo de primitiva que se va a utilizar para dibujarla. Por ejemplo, dibujar una primitiva de dos triángulos como lista de triángulos requiere 6 puntos
    pero como tira de triángulos sólo requiere 4 puntos. El tipo que utilices depende de lo que quieras dibujar y del efecto que quieras conseguir.</p>
  <p>Un último punto importante que hay que tener en cuenta al utilizar tus propios búferes de vértices de esta manera es cómo afecta a los lotes de vértices que se envían a la GPU. Cuando se crea un búfer de vértices que está creando el nivel más bajo de los datos gráficos, por lo que cuando se dibuja todo
    que sucede es que <span class="notranslate">GameMaker Studio 2</span> envía su búfer directamente a la tarjeta gráfica. Debido a esto, si quieres un mejor batching, debes trabajarlo tú mismo y almacenar las cosas que quieres batchear dentro del mismo buffer.</p>
  <p>Como ya hemos mencionado anteriormente, los formatos de vértice se construyen utilizando conjuntamente los siguientes 5 tipos de atributos (añadidos a través de la función <tt>vertex_format_add_*</tt> correspondiente):</p>
  <ul class="colour">
    <li>Color</li>
    <li>Normal</li>
    <li>Posición</li>
    <li>Posición 3D</li>
    <li>Coordenada de la textura</li>
  </ul>
  <p>Dentro del <span class="notranslate">shader</span> GLSL ES, estos tipos se reconocen utilizando los siguientes 4 atributos:</p>
  <ul class="colour">
    <li>Color</li>
    <li>Normal</li>
    <li>Posición</li>
    <li>Coordenadas de la textura</li>
  </ul>
  <p>Ahora, esto puede parecer extraño ya que parece que podemos especificar más tipos de atributos en nuestro formato de vértices que en el <span class="notranslate">sombreador</span> de vértices. Sin embargo, en el <span class="notranslate">sombreador</span> <i>Posición</i> y <i>Posición 3D</i> se tratan como el <em>mismo </em>atributo, excepto que
    Se espera que <i>la</i> Posición tenga sólo coordenadas &quot;x&quot; e &quot;y&quot; mientras que la Posición 3D tiene coordenadas &quot;x <i>&quot;, &quot;y</i> &quot; y &quot;z&quot;. Entonces, ¿cómo se asigna lo que hay en el formato de vértices a cómo se definen los atributos en el sombreador <span class="notranslate">?</span> Comencemos
    a un conjunto típico de atributos del <span class="notranslate">sombreador</span> por defecto:</p>
  <p> </p>
  <p class="code">attribute vec3 in_Position; // (x,y,z)<br> //attribute vec3 in_Normal; // (x,y,z) no utilizado en este <span class="notranslate">shader</span>.<br> attribute vec4 in_Colour; // (r,g,b,a)<br> attribute vec2 in_TextureCoord; // (u,v)</p>
  <p>Y aquí hay un trozo de código que configura un formato de vértices compatible con este shader <span class="notranslate">:</span></p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> my_format = vertex_format_end();</p>
  <p>Ahora bien, ¿cómo se hace coincidir el atributo <span class="notranslate">del sombreador</span> con el tipo de formato de vértice? Sólo se basa en la convención de nombres:</p>
  <ul class="colour">
    <li>&quot;in_Position&quot; se asigna a vertex_format_add_position <tt>/ _3d()</tt></li>
    <li><tt>&quot;in_Colour&quot; se asigna a vertex_format_add_colour <tt>()</tt></tt>
    </li>
    <li><tt><tt>&quot;in_TextureCoord&quot; se asigna a vertex_format_add_textcoord <tt>()</tt></tt>
      </tt>
    </li>
  </ul>
  <p><tt><tt><tt></tt></tt>
    </tt>Ahora, las cosas se complican cuando tienes múltiples atributos del mismo tipo, pero las cosas siguen basándose en la misma convención de nombres. <b>Ahora</b> veremos el suministro de <b>coordenadas</b> adicionales de <b>color y</b> <b>textura</b>, ya que sólo puede haber un atributo de Posición y uno de Normal en el formato de sombreado <span class="notranslate">o</span> vértice, pero puede <em>haber</em> múltiples atributos de color o textura.</p>
  <p>Cuando se añaden atributos de color adicionales al <span class="notranslate">sombreador</span>, es necesario añadir un número al final del atributo <span class="notranslate">del sombreador</span> para indicar a qué entrada concreta del formato de vértices se asigna el atributo. Aquí hay un ejemplo - primero el formato de vértice:</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> my_format = vertex_format_end();</p>
  <p>Y ahora los atributos de <span class="notranslate">sombreado</span> asociados:</p>
  <p class="code">attribute vec3 in_Position; // (x,y,z)<br> attribute vec4 in_Colour0; // (r,g,b,a)<br> attribute vec4 in_Colour1; // (r,g,b,a)<br> attribute vec2 in_TextureCoord; // (u,v)</p>
  <p>En este caso <tt>in_Colour0</tt> se asigna al primer <tt>vertex_format_add_colour()</tt> y <tt>in_Colour1</tt> se asigna al segundo.</p>
  <p>Las coordenadas de textura se manejan de forma ligeramente diferente al color. Básicamente, cualquier cosa que no se llame in_Position <tt>, in_Normal</tt> <tt>o</tt> uno de los atributos in_Colour <tt>[0 ... ]</tt> se trata como una coordenada de textura. El orden en que se definen
    El orden en que se definen, en la lista de atributos en el <span class="notranslate">shader</span>, es lo que denota a qué atributo en el formato de vértice se asignan. Ver el siguiente ejemplo <span class="notranslate">GML</span>:</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> vertex_format_add_textcoord();
    <br> vertex_format_add_textcoord();
    <br> my_format = vertex_format_end();</p>
  <p>Y el código <span class="notranslate">del shader</span> sería algo así:</p>
  <p class="code">attribute vec3 in_Position; // (x,y,z)<br> attribute vec4 in_Colour; // (r,g,b,a)<br> attribute vec2 in_myTexcoord; // (u,v)<br> attribute vec2 in_TextureCoord; // (u,v)<br> attribute vec2 in_Something; // (u,v)</p>
  <p>En este ejemplo, <tt>in_myTexcoord</tt>, <tt>in_TextureCoord</tt> e <tt>in_Something</tt> se asignan a los tres atributos de coordenadas de textura sucesivos definidos en el formato de vértices.</p>
  <p>Puedes encontrar una lista completa de todas las funciones necesarias para crear formatos de vértices, buffers de vértices y primitivas en la siguiente página:</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitivas y formatos de vértices</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="Additional_Information.htm">Información adicional</a></div>
        <div style="float:right">Siguiente: <a href="Guide_To_Using_Blendmodes.htm">Guía de uso de Blendmodes</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Primitive Building
Vertex Formats
Vertex Buffers
-->
  <!-- TAGS
using_primitives_vertex_buffers
-->

</body></html>