<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Buenas prácticas de programación</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains some best practices when programming using GameMaker Studio 2" />
  <meta name="rh-index-keywords" content="Best Practices When Programming" />
  <meta name="search-keywords" content="best practices" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Buenas prácticas de programación</h1>
  <p>En esta página vamos a cubrir algunas &quot;mejores prácticas&quot; a la hora de programar tu juego, y al mismo tiempo explicaremos un poco el funcionamiento interno de GameMaker <span class="notranslate">Studio 2.</span> Antes de continuar, sin embargo, vale la pena señalar dos puntos muy importantes
    muy importantes:</p>
  <ul class="colour">
    <li>Esta es una <em>guía</em>, y no el método definitivo y 100% perfecto para escribir tu juego. Las cosas que se mencionan aquí están más bien en la escala de organización y micro-optimización y deben ser incorporadas a sus hábitos de programación
      cuando te sientas cómodo con <span class="notranslate">GML</span> y creas que son apropiadas.</li>
    <li>Si tu juego funciona bien y estás contento con las cosas tal y como están, <em>no te apresures a cambiarlo todo sólo para exprimir unos pocos FPS extra.</em> Tienes que encontrar un equilibrio entre un código legible, flexible y modular con el tiempo y la energía
      necesario para cambiar las cosas, así como la ganancia general al final. Básicamente, si no está roto, no lo arregles y guarda lo que aprendas aquí para tu próximo proyecto.</li>
  </ul>
  <p>Dicho esto, pasemos a ver algunos consejos generales para escribir un buen código <span class="notranslate">GML</span> que puedes aplicar en cualquier momento...<br>
  </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Estilo de programación</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Cuando se trata de escribir código, todo el mundo tiene un <em>estilo</em>. El estilo con el que programas es la forma en que colocas tus paréntesis, cómo sangras las líneas, y cómo declaras y nombras las variables, etc., y es esencial para que tu código sea claro y legible
      para otras personas (y para tu futuro yo, cuando tengas que volver a este proyecto después de un tiempo en otra cosa).</p>
    <p class="dropspot">Hay muchos, muchos <a href="http://en.wikipedia.org/wiki/Programming_style">estilos de programación</a>, y algunos argumentarían que el suyo es el mejor para usar, pero la verdad es que casi cualquier estilo está bien siempre y cuando se sea <strong>consistente </strong>al
      siempre que se sea coherente al utilizarlo y sea <em>claro </em>y <em>obvio </em>lo que es y lo que hace cada cosa.</p>
    <p class="dropspot"><img alt="Code Style Example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BestPractice_Style_Example.png">La imagen anterior es un ejemplo de declaración de función en un script para ilustrar los puntos anteriores. Usted
      puede ver que utiliza los comentarios de estilo JSDoc para explicar claramente lo que hace todo, y el estilo de codificación es consistente, con sangrías de 4 espacios, guiones bajos utilizados para vars locales, salida registrada, etc...</p>
    <p class="dropspot">Tenga en cuenta también que, aunque el editor de scripts le permite doblar el código en cada uno de los corchetes de apertura/cierre, puede utilizar las etiquetas <span class="inline">#region</span> y <span class="inline">#endregion</span> para seccionar partes de su código y mejorar enormemente
      legibilidad, especialmente cuando se trata de scripts más grandes que contienen múltiples funciones. Las regiones también pueden ser comentadas - vea la sección de Edición de esta página en el manual):</p>
    <p class="dropspot"><img alt="Example Of Using Regions" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BestPractice_Regions.png">Al escribir el código, debe tener en cuenta que al compilar el juego final, <span class="notranslate">GameMaker Studio 2</span> elimina los comentarios, elimina los saltos de línea innecesarios, sustituye los valores constantes/macro/enuméricos y, en general, comprime el código.
      comentarios, elimina los saltos de línea y los espacios en blanco innecesarios, sustituye los valores constantes/macro/enuméricos y, en general, comprime el código como parte del proceso. Esto significa que puede añadir tantos espacios en blanco alrededor de su código como sea necesario y
      no tiene que preocuparse por mantener sus comentarios cortos o por usarlos con moderación.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Uso de variables locales</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Continuando con el punto anterior sobre el estilo de programación, una cosa que hacen muchos principiantes es meter todo lo posible en una línea de código. Por ejemplo:</p>
    <p class="code">draw_sprite(sprite_index, image_index, x + lengthdir_x(100, point_direction(x, y, mouse_x, mouse_y)), y + lengthdir_y(100, point_direction(x, y, mouse_x, mouse_y));</p>
    <p class="dropspot">Si bien no es completamente ilegible, es ineficiente (la función <span class="inline">point_direction()</span> se llama dos veces, por ejemplo) y es desordenada e incómoda de ver. Estaría mucho mejor expresado como:</p>
    <p class="code">var p_dir = point_direction(x, y, mouse_x, mouse_y);<br> var local_x = x + lengthdir_x(100, p_dir);<br> var local_y = y + lengthdir_y(100, p_dir);<br> draw_sprite(sprite_index, image_index, local_x, local_y);</p>
    <p class="dropspot">La memoria y los recursos necesarios para crear esas variables locales son insignificantes, y se compensan con creces por el beneficio instantáneo que usted (o cualquier otra persona que lea el código más tarde) obtiene de su claridad. La misma idea debería aplicarse también a las funciones, donde
      deberías asignar nombres sensatos a las variables de entrada, y utilizar un formato claro y variables locales cuando sea necesario para hacerlo lo más legible posible.</p>
    <p class="dropspot">Las variables locales son rápidas de procesar en el juego, así que aprovéchalas al máximo, y si una expresión aparece en un bloque de código o script dos o más veces, piensa en crear una variable local para ella. Cuando utilices los objetivos <a class="glossterm" data-glossterm="Compilador YoYo (YYC)" href="#">del Compilador<span class="notranslate">YoYo</span></a> (YYC), si haces referencia a <span class="inline">global</span> o a variables de instancia varias veces en una función o bloque de código, es especialmente beneficioso asignarlas a una variable local al principio de tu código
      y luego hacer referencia a esa variable local, ya que esto dará un rendimiento mucho mejor.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Arrays</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><a href="../GameMaker_Language/GML_Overview/Arrays.htm">Las matrices</a> son rápidas de usar y requieren menos memoria que las estructuras de datos, pero pueden optimizarse aún más. Cuando creas un array, la memoria se asigna en función de su tamaño, por lo que debes
      debe intentar inicializar un array a su tamaño máximo primero, incluso si no planea llenarlo hasta más tarde. Por ejemplo, si sabes que necesitas que un array contenga un máximo de 100 valores, deberías inicializarlo a 100 espacios directamente,
      utilizando la función <a href="../GameMaker_Language/GML_Reference/Variable_Functions/array_create.htm"><span class="inline">array_create()</span></a> función:</p>
    <p class="code">array = array_create(100, 0);</p>
    <p class="dropspot">Esto asigna la memoria para ello en un &quot;trozo&quot; con todos los valores de la matriz que se establecen en el valor predeterminado de 0 y ayuda a mantener las cosas rápidas, ya que de lo contrario cada vez que se agrega un nuevo valor a la matriz toda la memoria tiene que ser reasignada de nuevo.</p>
    <p class="note"><strong>NOTA</strong>: ¡En el objetivo HTML5 la asignación de arrays así no se aplica y tus arrays deben ser inicializados desde 0 para este objetivo! Puedes manejar esto fácilmente comprobando la variable os_browser, por ejemplo:</p>
    <p class="code"><span style="padding-left:1px;">si (os_browser == browser_not_a_browser)<br>
    {<br>
    array_create(100, 0);<br>
    }<br>
else<br>
    {<br>
    for (var i = 0; i &lt; 100; ++i;)<br>
        {<br>
        array[i] = 0;<br>
        }<br>
    }</span></p>
    <p class="dropspot">También puedes liberar la memoria asociada a un array estableciendo la variable utilizada como 0. Así, para borrar el array del ejemplo de código anterior, simplemente usarías</p>
    <p class="code">array = 0;</p>
    <p class="dropspot">También hay que tener en cuenta que los arrays se pasan <strong>por</strong> referencia, pero se copiará todo cuando se haga un cambio (este comportamiento se llama <strong>copy on write</strong>). Por lo tanto, si pasas un array a una función, estás pasando una <em>referencia </em>al
      el array original y cualquier valor que se lea de él vendrá de la fuente original. Esto es bueno y rápido, pero si necesitas modificar alguno de los valores del array, el propio array se duplica en el momento de la escritura y cualquier cambio realizado <strong>debe ser devuelto desde la función o se perderá</strong>.
      Esto es mucho más lento y consume más memoria, así que ten cuidado con el uso de arrays en funciones.</p>
    <p class="dropspot">Sin embargo, se puede evitar este comportamiento de copia en escritura utilizando el <a href="../GameMaker_Language/GML_Overview/Accessors.htm">accesorio</a> especial para matrices <span class="inline">@</span>, ya que esto da acceso directo a la matriz subyacente. Por ejemplo:</p>
    <p class="code">// Llamar a una función, pasando nuestro array<br> mi_función(mi_array);
    </p>
    <p class="code">// La función tiene este aspecto:<br>
      <br> function my_function(_a)<br> {
      <br> // Se copiará el array y se modificará la copia,<br> // requiriendo que se utilice &quot;return _a&quot;, posteriormente<br> _a[0] = 100;<br> // Esto modificará el array ORIGINAL directamente y<br> // no requiere que se devuelva<br> _a[@0]
      = 100;<br> }
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Estructuras de datos</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">En <span class="notranslate">GameMaker Studio 2</span> <a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">las estructuras de datos</a> han sido optimizadas para ser mucho más rápidas que en las versiones anteriores <span class="notranslate">de GameMaker</span>. Todavía tienen que ser limpiados (destruidos) cuando
      cuando no se utilizan para liberar memoria, y aún pueden ser más lentas que, por ejemplo, las matrices, pero la facilidad de uso y las funciones adicionales para tratar los datos que contienen pueden compensar a menudo la mínima diferencia de velocidad, así que no tengas miedo de utilizarlas en tus
      juegos.
    </p>
    <p class="dropspot">Cabe destacar que, de todas las estructuras de datos, los mapas DS son especialmente rápidos, tanto para leer como para escribir, lo que los convierte en una excelente opción para todo tipo de tareas.</p>
    <p class="dropspot">Anteriormente mencionamos <a href="../GameMaker_Language/GML_Overview/Accessors.htm">los accesores</a> para los arrays, pero también están disponibles para las estructuras de datos, lo que puede ayudar a limpiar tu código y hacerlo mucho más fácil de leer.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Colisiones</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">Hay <a href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/Collisions.htm">varias formas de tratar las colisiones</a> en <span class="notranslate">GameMaker Studio 2</span>, y la mayoría de ellas conllevan una sobrecarga adicional de la CPU. Las funciones <span class="inline">collision_</span> y <span class="inline">point_</span>, <span class="inline">place_</span> y <span class="inline">instance_</span> se basan en la comprobación de <a class="glossterm" data-glossterm="cuadro delimitador" href="#">los límites de las cajas</a> con
      todas las instancias de un tipo determinado dentro de la sala, y aunque hay alguna optimización incorporada al motor para limitar estas comprobaciones, las colisiones nunca son lo más eficiente. Si se empiezan a utilizar colisiones precisas, el rendimiento
      Si empiezas a usar colisiones precisas, el rendimiento empeorará notablemente, ya que no sólo tendrás que hacer comprobaciones por caja delimitadora, sino que también harás comprobaciones por píxel, lo cual es muy lento. Hay un blog técnico de <span class="notranslate">YoYo</span> Games que habla de esto aquí:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="https://www.yoyogames.com/blog/32/the-hazards-of-precise-collision-detection">Los peligros de la detección precisa de colisiones</a></li>
    </ul>
    <p class="dropspot">Esto no quiere decir que no debas utilizar estas funciones, ya que pueden ser muy útiles. Sin embargo, debes saber cuáles utilizar y cuándo, ya que todas funcionan de forma ligeramente diferente y tendrán distintas velocidades. Como regla general, las funciones
      <span class="inline">place_</span> son más rápidas que las funciones <span class="inline">instance_</span>, que son más rápidas que las funciones <span class="inline">collision_</span> y <span class="inline">point_</span>, así que lea las páginas
      del manual para cada uno de estos tipos de funciones y asegúrate de elegir la más apropiada para cada situación.</p>
    <p class="dropspot">Alternativamente, mira a crear un<strong> sistema de colisión basado en azulejos</strong>, que puede ser creado usando las <a href="../GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/Tile_Map_Layers.htm">funciones de mapa de azulejos</a> o incluso
      un array 2D personalizado o una rejilla DS. Estos serán muy rápidos y ayudarán a aumentar la velocidad de tu juego. Sin embargo, si estás usando un terreno irregular o paredes y objetos que no se alinean con una cuadrícula, puede que no sean apropiados. Puedes encontrar un sencillo
      tutorial sobre las colisiones de tilemap en el siguiente enlace de vídeo</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="https://youtu.be/UyKdQQ3UR_0">Colisiones de baldosas en <span class="notranslate">GameMaker Studio 2</span></a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Intercambio de texturas y lotes de vértices</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot">Si enciende el <a href="../GameMaker_Language/GML_Reference/Debugging/show_debug_overlay.htm"><strong>superposición de la depuración</strong></a>verá que hay dos cifras entre paréntesis en la parte superior de la pantalla cuando se realizan las pruebas. La primera es el número
      de <strong>intercambios de texturas </strong>que se realizan y la segunda es el número de <strong>lotes de vértices</strong>. Hay una serie de factores que influyen en estas cifras y nunca las bajarás a (0) (0) ya que el motor requiere uno o dos de cada
      de cada paso, pero deberías intentar que estos valores sean lo más bajos posible.</p>
    <p class="dropspot"><img alt="The Debug Overlay Bar" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BestPractices_DebugOverlay.png">Para los intercambios de texturas, la mejor y más eficiente manera de hacerlo es optimizar la forma en que sus sprites y fondos
      se almacenan en la página de textura. Esto se hace desde las <a href="../The_Asset_Editors/Sprites.htm">propiedades de los sp</a>rites, y puedes crear páginas de texturas en el <a href="../Settings/Texture_Groups.htm">editor de grupos de texturas</a>. Si tienes un número
      de imágenes que sólo se utilizan en el menú principal (por ejemplo), entonces ponlas juntas en una página de <a href="../Settings/Texture_Information/Texture_Pages.htm">textura</a> separada. Lo mismo si tienes imágenes específicas para cada nivel, o para el jugador y los enemigos,
      etc. Básicamente, quieres agruparlas por uso para que los intercambios se reduzcan al máximo. Además, para ayudar a mantener la <a class="glossterm" data-glossterm="VRAM" href="#">VRAM</a> optimizada, puedes utilizar las diferentes funciones de <a href="../GameMaker_Language/GML_Reference/Drawing/Textures/Textures.htm">prefetch y flush</a> para cargar y eliminar texturas de la memoria según sea necesario.</p>
    <p class="note"><strong>NOTA</strong>: Como se mencionó al principio de esta página, si tu juego se ejecuta bien con unos FPS decentes, no te preocupes demasiado por los intercambios de texturas... especialmente cuando crees proyectos en los objetivos de escritorio. Estas optimizaciones son mejores cuando
      Estas optimizaciones son mejores cuando se usan con juegos grandes o en dispositivos móviles de gama baja, y cuando se usan de forma incorrecta pueden realmente impactar negativamente en el rendimiento.</p>
    <p class="dropspot">La información de los vértices se envía en &quot;lotes&quot; a la GPU para el dibujo y, en general, cuanto más grande sea el lote, mejor. Por lo tanto, se debe evitar &quot;romper&quot; el lote al dibujar, ya que aumentará el número de lotes de vértices enviados a
      la GPU. Hay una serie de cosas que romperán el lote, siendo las principales los <strong>modos de mezcla</strong>, la configuración del <strong>color de dibujo</strong>, la configuración del <strong>alfa de dibujo</strong>, y el dibujo utilizando las formas y primitivas incorporadas.
      primitivas incorporadas.
    </p>
    <p class="dropspot">Por lo tanto, si tienes varias instancias de viñetas que dibujan usando el modo de mezcla <span class="inline">bm_add</span> - por ejemplo - estarás creando un nuevo lote de vértices para cada una de ellas, ¡lo cual es definitivamente algo malo! En su lugar, ten un objeto controlador
      en tu juego que dibuje todas las balas, así:</p>
    <p class="code">gpu_set_blendmode(bm_add);<br> with (obj_BULLET)<br> {<br> draw_self();<br> } <br> gpu_set_blendmode(bm_normal);
    </p>
    <p class="note"><strong>NOTA</strong>: Esto no sólo se aplica al uso de bm_add <span class="inline" style="font-size: 14px">-</span> cualquier cambio de mezcla romperá el lote y dará un golpe de rendimiento.</p>
    <p class="dropspot">De este modo, todas las viñetas se dibujarán en el mismo lote. Este método puede aplicarse también al alfa y al color de dibujo, y de hecho el uso juicioso de las funciones <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendenable.htm"><span class="inline">gpu_set_blendenable()</span></a>,
      <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestref.htm"><span class="inline">gpu_set_alphatestref()</span></a>y <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestenable.htm"><span class="inline">gpu_set_alphatestenable()</span></a> puede
      mejorar en gran medida el rendimiento y puede activarse/desactivarse según sea necesario en todo el código del proyecto, aunque puede que no sean apropiadas para todos los tipos de gráficos o proyectos.</p>
    <p class="note"><strong>NOTA</strong>: Si no necesitas que la instancia se dibuje a sí misma cuando usas un controlador de esta manera, puedes simplemente añadir un comentario en el evento de dibujo para suprimir el dibujo por defecto, o hacer la instancia invisible (aunque esto
      (aunque esto impedirá que se ejecute todo el código de la instancia en todos los eventos de dibujo).</p>
    <p class="dropspot">Otra forma de reducir estos números es desactivar la opción de <strong>Página de Textura Separada</strong> para los sprites a menos que sea absolutamente necesario. Cada imagen almacenada de esta manera se envía a su propia página de textura y se agrupa de manera diferente, por lo que tener estas imágenes
      en una página de textura normal es mejor. A continuación, puede obtener las coordenadas UVS utilizando la función <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="inline">sprite_get_uvs()</span></a> función
      y almacenarlas en variables para su uso posterior. Puede ser una pequeña cantidad de código extra, pero el impulso que obtendrá vale la pena. Tenga en cuenta que este método no permite la repetición de texturas.</p>
    <p class="dropspot">Como con todos estos consejos, si te complica la vida cambiarlo y tu juego funciona bien, no te preocupes demasiado...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Partículas</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">Las partículas</a> ofrecen una forma muy rápida y eficaz de crear efectos dinámicos en tu juego, y en general ofrecen un buen rendimiento. Sin embargo, hay que tener en cuenta que
      el uso de la mezcla aditiva, la mezcla alfa y la mezcla de colores en las partículas puede reducir el rendimiento, especialmente en los objetivos móviles, así que si no lo necesitas, no lo uses. La mezcla aditiva, en particular, puede aumentar mucho los lotes de vértices
      de los vértices y debe usarse con cuidado.</p>
    <p class="dropspot">Ten en cuenta que en el objetivo HTML5 que no es WebGL, tener partículas multicolores y que se desvanecen requerirá una gran cantidad de caché de imágenes y será muy lento. Sin embargo, como los sprites de partículas pueden ser animados, puedes crear un sprite animado que tenga subimágenes que
      que cambien de color y utilizarlo para la partícula. Seguirá pareciendo un cambio de color gradual, pero no requerirá la creación constante de imágenes de caché.</p>
    <p class="dropspot">Puede encontrar más información sobre las partículas en la página <a href="Guide_To_Using_Particles.htm">Guía de uso de las partículas</a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Superficies</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">Por último, vamos a tocar brevemente el uso de <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/Surfaces.htm">las superficies, ya que</a> GameMaker <span class="notranslate">Studio 2 cuenta con</span> una optimización bastante importante a la hora de utilizarlas en tus juegos: la posibilidad de
      activar y desactivar el <strong>búfer de profundidad</strong>.</p>
    <p class="dropspot">Cuando se utilizan superficies de forma normal, GMS2 crea una superficie y un búfer de profundidad adicional para garantizar una clasificación de profundidad adecuada al dibujar cualquier cosa en 3D. Sin embargo, para la mayoría de los juegos 2D, este búfer de profundidad adicional no es necesario y, por tanto, ocupa espacio de memoria y tiempo de procesamiento adicionales que podrían utilizarse para otras cosas.
      está ocupando espacio de memoria adicional y tiempo de procesamiento que podría ser utilizado para otras cosas. Aquí es donde la función <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_depth_disable.htm"><span class="inline">surface_depth_disable()</span></a> viene
      entra en juego...</p>
    <p class="dropspot">Esta función puede llamarse antes de crear una superficie para desactivar la generación del buffer de profundidad, y todas las superficies creadas después no tendrán un buffer de profundidad creado para ellas. Puede activar/desactivar esta función según sea necesario, e incluso puede llamarla
      una vez al inicio del juego para deshabilitar los buffers de profundidad para todas las llamadas de superficie posteriores (y en la mayoría de los juegos 2D esto está bien). No va a dar un gran aumento de rendimiento, pero es ciertamente algo a tener en cuenta si su juego se basa en gran medida
      en las superficies y puede evitar que el juego se quede sin memoria en los dispositivos con menos especificaciones.</p>
  </div>
  <p> </p>
  <p>Aparte de las cosas principales mencionadas anteriormente, hay otras cosas más generales que pueden ayudar al rendimiento y que también se consideran &quot;buenas prácticas&quot;:</p>
  <ul class="colour">
    <li>no tengas miedo de usar las funciones trigonométricas ya que (en contra de la creencia popular) son bastante rápidas, especialmente cuando se comparan con las partículas, las colisiones, las cuerdas, etc...</li>
    <li>no pongas código que no sea para dibujar cosas en los eventos Draw</li>
    <li>utilizar una alarma para llamar a cualquier código que no tenga que ser llamado en cada paso (en lugar de añadir esto en el evento Paso de todos modos)</li>
  </ul>
  <p>Pero, como hemos mencionado al principio de la página, todas estas optimizaciones son opcionales y si tu juego funciona bien con 60 lotes de vértices, 80 intercambios de texturas, mezcla aditiva, etc., entonces no te preocupes demasiado. Sólo ten en cuenta estas cosas
    cuando programes tu próximo juego...</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="Additional_Information.htm">Información adicional</a></div>
        <div style="float:right">Siguiente: <a href="The_File_System.htm">El sistema de archivos</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Nest Practices
-->
  <!-- TAGS
best_practices
-->

</body></html>