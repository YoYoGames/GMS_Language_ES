<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>buffer_create_from_vertex_buffer_ext</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for buffer_create_from_vertex_buffer_ext" />
  <meta name="rh-index-keywords" content="buffer_create_from_vertex_buffer_ext" />
  <meta name="search-keywords" content="buffer_create_from_vertex_buffer_ext,buffer_fixed,buffer_grow,buffer_wrap,buffer_fast,buffer_vbuffer" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>buffer_create_from_vertex_buffer_ext</h1>
  <p>Esta función se utiliza para asignar una porción de memoria como búfer en el juego que se llena con los datos de un <a href="../Drawing/Primitives/Primitives_And_Vertex_Formats.htm">búfer de vértices</a> creado previamente. La función devuelve un id <i>de búfer</i> único que debe ser almacenado en una variable y utilizado para todas las llamadas posteriores a la función del búfer. La función toma el identificador del búfer de vértices a utilizar (devuelto por la función <a href="../Drawing/Primitives/vertex_create_buffer.htm"><tt>vertex_create_buffer()</tt></a>,
    por ejemplo) con las siguientes constantes que se utilizan para definir el tipo de búfer:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Constante</th>
        <th>Descripción</th>
      </tr>
      <tr>
        <td>buffer_fixed</td>
        <td>Un buffer de tamaño fijo.</td>
      </tr>
      <tr>
        <td>buffer_grow</td>
        <td>Un búfer que &quot;crecerá&quot; dinámicamente a medida que se añadan datos</td>
      </tr>
      <tr>
        <td>buffer_wrap</td>
        <td>Un búfer donde los datos se &quot;envolverán&quot;. Cuando los datos que se añaden alcanzan el límite del tamaño del búfer, la sobreescritura se colocará de nuevo al principio del búfer, y la escritura posterior continuará desde ese punto.</td>
      </tr>
      <tr>
        <td>buffer_fast</td>
        <td>Buffer especial &quot;despojado&quot; que es extremadamente rápido para leer/escribir. Sólo se puede utilizar con <a href="buffer_write.htm">los tipos de datos</a> <tt>buffer_u8</tt>, y <i>debe</i> estar alineado a 1 byte.</td>
      </tr>
      <tr>
        <td>buffer_vbuffer</td>
        <td>Este tipo de búfer debe utilizarse únicamente como búfer de vértices.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Aparte del tipo de búfer, también tendrás que establecer la <i>alineación de bytes</i> para el búfer. Este valor variará en función de los datos que desee almacenar en el búfer, y en la mayoría de los casos un valor de 1 está perfectamente bien. Sin embargo, tenga en cuenta que
    para algunas operaciones es <i>esencial</i> una alineación específica, y una alineación incorrecta puede provocar errores (para más detalles sobre la alineación, véase <a href="../../../Additional_Information/Guide_To_Using_Buffers.htm">Alineación del b</a>úfer). Lo siguiente
    es una guía general para mostrar qué valores son los más apropiados para cada tipo de datos (en caso de duda, utilice una alineación de 1):</p>
  <ul class="colour">
    <li>Las cadenas deben estar alineadas a 1 byte.</li>
    <li>Los enteros de 8 bits con signo o sin signo pueden ser alineados a cualquier valor, pero tenga en cuenta que para un buffer rápido (ver <a href="buffer_write.htm"><tt>buffer_write()</tt></a>) <i>debe</i> estar alineado a 1.</li>
    <li>Los enteros de 16 bits con signo o sin signo deben alinearse a 2 bytes.</li>
    <li>Los enteros de 32 bits con o sin signo deben alinearse a 4 bytes</li>
    <li>Los flotadores de hasta 16bits deben alinearse a 2 bytes. <i>(¡No se admite actualmente!)</i></li>
    <li>Los flotadores de hasta 32bits deben alinearse a 4 bytes.</li>
    <li>Los flotadores de hasta 64bits deben alinearse a 8 bytes.</li>
  </ul>
  <p class="note"><b>NOTA</b>: Los buffers de vértices están alineados a 1 byte, pero puedes crear el buffer con cualquier alineación dependiendo de cómo quieras tratar los datos, ya que los datos de los vértices son simplemente una copia de memoria sin procesar en el buffer.</p>
  <p>Los dos últimos argumentos se utilizan para especificar el rango de datos de vértices que se desea copiar en el búfer recién creado. El vértice inicial puede estar en cualquier lugar entre 0 y el número de vértices -1, y luego se da el número de vértices a partir de ese punto
    a copiar. Puedes utilizar la función <tt><a href="../Drawing/Primitives/vertex_get_number.htm">vertex_get_number()</a></tt> en el búfer de vértices para obtener el número total de vértices almacenados.</p>
  <p class="note"><b>NOTA</b>: Es importante que elimines de la memoria cualquier recurso creado dinámicamente como éste cuando ya no lo necesites para evitar fugas de memoria, así que cuando termines con el buffer que has creado deberás liberarlo de nuevo
    utilizando <span style="font-size:1px;"><a href="buffer_delete.htm"><tt style="font-size: 14px">buffer_delete()</tt></a></span>. Ten en cuenta también que el buffer de vértices utilizado para crear el nuevo buffer tampoco se elimina de la memoria y debes utilizar la función
    <span style="font-size:1px;"><a href="../Drawing/Primitives/vertex_delete_buffer.htm"><tt style="font-size: 14px">vertex_delete_buffer()</tt></a></span> cuando ya no sea necesaria.</p>
  <p> </p>
  <h4>Sintaxis:</h4>
  <p class="code">buffer_create_from_vertex_buffer_ext(vertex_buffer, type, alignment, start_vertex, num_vertices)</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Descripción</th>
      </tr>
      <tr>
        <td>búfer_de_vértices</td>
        <td>El índice del buffer de vértices a utilizar.</td>
      </tr>
      <tr>
        <td>tipo</td>
        <td>El tipo de buffer a crear (ver la lista de constantes más abajo).</td>
      </tr>
      <tr>
        <td>alineación</td>
        <td>La alineación de bytes para el buffer</td>
      </tr>
      <tr>
        <td>inicio_vértice</td>
        <td>El vértice inicial.</td>
      </tr>
      <tr>
        <td>número_de_vertices</td>
        <td>El número total de vértices a copiar.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devuelve:</h4>
  <p class="code">Int (ID de la memoria intermedia de vértices)</p>
  <p> </p>
  <h4>Ejemplo:</h4>
  <p class="code">var v_num = vertex_get_number(model_buff); player_buffer = buffer_create_from_vertex_buffer(model_buffer, buffer_grow, 1, 0, v_num - 1);</p>
  <p>El código anterior asigna memoria a un búfer y luego copia los datos de todos los vértices del búfer de vértices dado en él, devolviendo el índice del nuevo búfer que se almacena en la variable &quot;player_buffer&quot;, para su uso futuro.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Volver: <a href="Buffers.htm">Buffers</a></div>
        <div style="float:right">Siguiente: <a href="buffer_delete.htm">buffer_delete</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
buffer_create_from_vertex_buffer_ext
buffer_fixed
buffer_grow
buffer_wrap
buffer_fast
buffer_vbuffer
-->
  <!-- TAGS
buffer_create_from_vertex_buffer_ext
-->

</body></html>