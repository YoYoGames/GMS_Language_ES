<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>alarma</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the variable alarm" />
  <meta name="rh-index-keywords" content="alarm" />
  <meta name="search-keywords" content="alarm" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>alarma</h1>
  <p>Esta <a href="../../../../GML_Overview/Arrays.htm">matriz</a> de 1 dimensión se utiliza para obtener el valor actual de las alarmas que pueda tener la instancia, o puede utilizarse para establecer dichas alarmas. Hay doce alarmas incorporadas en cada instancia de un objeto,
    y cada una tiene su propio <a href="../../../../../The_Asset_Editors/Object_Properties/Object_Events.htm">evento</a> que se ejecutará cuando esta variable llegue a 0.</p>
  <p>Las alarmas son contadas al inicio de cada paso, <i>después</i> del evento Iniciar Paso pero <i>antes</i> del evento principal de Paso y antes de que se renderice algo para el paso. Hay que tener en cuenta que la alarma no termina cuando llega a 0 (aunque el evento
    se haya disparado), ya que en el siguiente paso bajará a -1, por lo que si necesitas detener una alarma por cualquier motivo deberás establecer su valor en el array a -1 <i>y no</i> a 0. Los tiempos de las alarmas se calculan en <i>pasos de juego</i>, con un valor de 30 siendo 30 pasos,
    60 son 60 pasos, etc...</p>
  <p class="note"><b>NOTA:</b> Una alarma sin acciones o código en ella no se ejecutará. Sin embargo, incluso con sólo un comentario y sin código, la alarma hará una cuenta atrás.</p>
  <p>Puede establecer la matriz de alarmas directamente (y recuperar el valor de la alarma actual directamente utilizando la matriz también), pero en algunas circunstancias este no es el método más apropiado, por lo que también puede utilizar la función <tt><a href="../alarm_set.htm">alarm_set()</a></tt> para
    establecer una alarma, y la función <a href="../alarm_get.htm"><tt>alarm_get()</tt></a> para obtener el valor de una alarma.</p>
  <p> </p>
  <h4>Sintaxis:</h4>
  <p class="code">alarma[val];</p>
  <p> </p>
  <h4>Devuelve:</h4>
  <p class="code">Entero (-1 si la alarma no está funcionando)</p>
  <p> </p>
  <h4>Ejemplo:</h4>
  <p class="code">si canshoot<br> {
    <br> if keyboard_check_pressed(vk_space)<br> {
    <br> canshoot = false;<br> alarm[0] = room_speed;<br> instance_create_layer(x, y, &quot;Bullets&quot;, obj_Bullet);<br> }
    <br> }
  </p>
  <p>El código anterior comprueba una variable y, si es verdadera, comprueba si se ha pulsado una tecla y, si es verdadera, finalmente establece la variable como falsa, establece una alarma (donde se establecerá como verdadera de nuevo) y crea una instancia.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Volver: <a href="Instance_Variables.htm">Instance Variables</a></div>
        <div style="float:right">Siguiente: <a href="direction.htm">dirección</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
alarm
-->
  <!-- TAGS
alarm
-->
</body>
</html>