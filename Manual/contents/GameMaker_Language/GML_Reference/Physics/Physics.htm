<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Física</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for physics functions" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Physics" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Física</h1>
  <p>La integración de una biblioteca de física dedicada a <span class="notranslate">GameMaker Studio 2</span> significa que ahora puedes controlar todos los aspectos del comportamiento físico de los objetos dentro de tu mundo de juego, especialmente las colisiones y la interacción de los objetos. El sistema &quot;tradicional&quot; de
    tradicional&quot; (que <span class="notranslate">GameMaker Studio 2</span> utiliza por defecto) es un sistema &quot;reactivo&quot;, en el que se comprueba si hay una colisión y luego se reacciona <i>a</i> ella con código que se coloca en los objetos individuales. Esto está bien para los juegos simples,
    pero cuando tienes un gran número de objetos y tienes que codificar cómo reaccionan todos a diferentes situaciones en el mundo del juego, rápidamente se hace evidente que este sistema no es suficiente. Es entonces cuando hay que recurrir al sistema de física de GameMaker <span class="notranslate">Studio 2</span>.</p>
  <p>El sistema de física funciona de forma muy diferente a las colisiones normales. Es más bien un sistema &quot;pasivo&quot; en el que defines una serie de propiedades para tus objetos en el mundo del juego, así como las propiedades del propio mundo del juego, antes de que
    antes de que se produzcan colisiones o interacciones. Estas &quot;reglas&quot; codificadas regirán entonces la forma en que interactúa todo en tu mundo de juego. De este modo, con unos pocos códigos simples y la configuración correcta de la sala, puedes crear interacciones muy complejas entre
    objetos y el mundo que ocurrirán y se resolverán <i>sin</i> que tengas que codificar cada uno de los posibles resultados.</p>
  <p>Hay algunas cosas que debes tener en cuenta cuando trabajes con el mundo de la física de <span class="notranslate">GameMaker Studio 2</span>:</p>
  <ul class="colour">
    <li>El sistema de física existe &quot;aparte&quot; de la estructura básica de salas e instancias de GameMaker <span class="notranslate">Studio 2, lo que significa</span> que sus tiempos y funciones no están necesariamente ligados a la velocidad de la sala y al orden de los pasos como todo lo demás.</li>
    <li>El sistema de física sustituye a muchas de las funciones normales de las instancias... por ejemplo, en lugar de establecer una velocidad y una dirección para una instancia, si se ha declarado como un cuerpo físico totalmente simulado, utilizarás una <i>fuerza</i> o un <i>impulso</i> para conseguir que se mueva en el mundo del juego, o si no está habilitado para la física, tendrás que establecer tú mismo las posiciones x e y. Esto toma un poco de tiempo para acostumbrarse, así que experimenta con las funciones de física y llega a saber cómo funciona todo antes de
      de integrarlas en tu proyecto.</li>
    <li>Debes limitar el número de instancias que se crean, así como el número de colisiones y grupos de colisiones con los que tiene que lidiar el mundo de la física. <i>No puedes</i> tener miles de instancias, todas con propiedades físicas y colisiones
      y esperar que todo funcione bien debido al hecho de que la física requiere algunos cálculos bastante intensivos, así que limítate y optimiza cuando sea posible.</li>
    <li>Cuando configure las colisiones, utilice los padres tanto como sea posible, ya que el sistema de colisiones tiene un número limitado de <i>bits de colisión</i> disponibles para asignar a las instancias para que Box2D detecte las colisiones. Por ejemplo, si tiene cinco objetos de pared diferentes
      no compruebe cinco colisiones, sino que cree un objeto padre y lo asigne a las cinco paredes y luego haga una comprobación de colisión con el padre. Las propiedades físicas de los objetos <i>no se heredan</i>, sólo las colisiones. De esta manera usted
      puede mantener su juego optimizado y libre de errores.</li>
    <li>Intenta no mover las instancias de un punto a otro de la sala de ninguna manera que no sea utilizando las funciones de física (es decir, no establezcas las coordenadas x/y manualmente). Aunque esto puede hacerse y en algunas circunstancias puede ser necesario, esto es generalmente
      evitar debido a los resultados impredecibles que puede tener en el motor de física, especialmente cuando se trata de resolver las colisiones.</li>
    <li>Hay que tener cuidado al vincular los fixture, ya que pueden vincularse a objetos e instancias de forma independiente. Esto significa que si vinculas un fixture a (por ejemplo) &quot;o_Wall&quot;, todas las instancias de ese objeto recibirán el fixture. Si sólo
      Si sólo quieres vincular un fixture a una instancia, entonces usa el id de esa instancia en la función apropiada.</li>
    <li>Por favor, tenga en cuenta que debido a las diferencias en la precisión del punto flotante puede encontrar que las versiones de su juego para diferentes plataformas de destino pueden mostrar un comportamiento sutilmente diferente a la versión estándar <span class="notranslate">de Windows</span>, aunque cada versión será auto-consistente
      a través de las ejecuciones posteriores.</li>
    <li>Para evitar inestabilidades en la simulación física, Box2D restringe a límites superiores la cantidad que un cuerpo puede rotar y trasladar dentro de una sola actualización. Las limitaciones aparentes variarán en función de la precisión de la simulación física de acuerdo
      con el número de actualizaciones y la velocidad de actualización del mundo físico, y también de acuerdo con el escalado del mundo físico. Esto significa que (por ejemplo) si tienes una velocidad de actualización del mundo de 60, la velocidad máxima de movimiento sería de 20.</li>
  </ul>
  <p>En las siguientes páginas encontrará información sobre las funciones físicas:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="The_Physics_World/The_Physics_World.htm">El mundo de la física</a></li>
    <li><a href="Forces/Forces.htm">Fuerzas</a></li>
    <li><a href="Fixtures/Fixtures.htm">Accesorios</a></li>
    <li><a href="Joints/Joints.htm">Articulaciones</a></li>
    <li><a href="Soft_Body_Particles/Soft_Body_Particles.htm">Partículas corporales blandas</a></li>
    <li><a href="Physics_Variables/Physics_Variables.htm">Variables físicas</a></li>
  </ul>
  <p> </p>
  <p>Por último, hay un par de funciones especiales de física que pueden ser útiles para simulaciones de física más avanzadas. La primera es para comprobar posibles colisiones en un punto específico de la sala, y la segunda es para generar propiedades personalizadas de masa e inercia
    personalizadas dentro de una instancia:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="physics_test_overlap.htm">physics_test_overlap</a></li>
    <li><a href="physics_mass_properties.htm">physics_mass_properties</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="../GML_Reference.htm">Referencia<span class="notranslate">GML</span></a></div>
        <div style="float:right">Siguiente: <a href="../In_App_Purchases/In_App_Purchases.htm">Compras en la aplicación</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Physics
Physics Functions
-->
  <!-- TAGS
physics_functions
-->
</body>
</html>