<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_particle_get_data_particle</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_particle_get_data_particle" />
  <meta name="rh-index-keywords" content="physics_particle_get_data_particle,phy_particle_data_flag_typeflags,phy_particle_data_flag_position,phy_particle_data_flag_velocity,phy_particle_data_flag_colour,phy_particle_data_flag_category,phy_particle_data_flag_color" />
  <meta name="search-keywords" content="physics_particle_get_data_particle,phy_particle_data_flag_typeflags,phy_particle_data_flag_position,phy_particle_data_flag_velocity,phy_particle_data_flag_colour,phy_particle_data_flag_category,phy_particle_data_flag_color" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>physics_particle_get_data_particle</h1>
  <p>Esta función devuelve varias piezas de información sobre una sola partícula en la simulación física utilizando las banderas dadas comprobadas. El índice de la partícula (su ID) es el que fue devuelto por la función <a href="physics_particle_create.htm"><tt>physics_particle_create()</tt></a>,
    y el buffer utilizado debe haber sido creado previamente con la función <a href="../../Buffers/buffer_create.htm"><tt>buffer_create()</tt></a>. Debe ser del tipo &quot;grow&quot;, con un tamaño aproximado al de los datos devueltos esperados
    de retorno. Las banderas en sí mismas se establecen utilizando las constantes que se indican a continuación, y se utilizaría el bitwise <i>o</i> &quot;|&quot; para crear un único valor de bandera para obtener la información deseada.</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Constante</th>
        <th>Descripción</th>
        <th>Tipo de datos</th>
      </tr>
      <tr>
        <td>phy_particle_data_flag_typeflags</td>
        <td>El valor de las banderas para la partícula.</td>
        <td>buffer_u32</td>
      </tr>
      <tr>
        <td>phy_particle_data_flag_position</td>
        <td>La posición x e y de la partícula.</td>
        <td>2 x buffer_f32</td>
      </tr>
      <tr>
        <td>phy_particle_data_flag_velocidad</td>
        <td>La velocidad horizontal y vertical.</td>
        <td>2 x buffer_f32</td>
      </tr>
      <tr>
        <td>phy_particle_data_flag_colour</td>
        <td>El color y el valor alfa (hexadecimal).</td>
        <td>buffer_f32</td>
      </tr>
      <tr>
        <td>phy_particle_data_flag_category</td>
        <td>La categoría de la partícula (tal y como se definió al crear la partícula).</td>
        <td>buffer_u32</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Sintaxis:</h4>
  <p class="code">physics_particle_get_data_particle(ind, buffer, flags)</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Descripción</th>
      </tr>
      <tr>
        <td>ind</td>
        <td>El índice (ID) de la partícula de la que se van a obtener los datos.</td>
      </tr>
      <tr>
        <td>buffer</td>
        <td>El buffer (previamente creado) que se utilizará para almacenar los datos.</td>
      </tr>
      <tr>
        <td>banderas</td>
        <td>Las banderas que se utilizarán para extraer datos sobre tipos específicos de partículas.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devuelve:</h4>
  <p class="code">Datos del buffer</p>
  <p> </p>
  <h4>Ejemplo:</h4>
  <p class="code">var part = physics_particle_create(flags, x, y, x_vel, y_vel, c_white, 1, 1)<br> var flags = phy_particle_data_flag_position | phy_particle_data_flag_velocity;<br> var buffer = buffer_create(16, buffer_grow, 4);<br> physics_particle_get_data_particle(part,
    buffer, flags);<br> px = buffer_read(buffer, buffer_f32);<br> py = buffer_read(buffer, buffer_f32);<br> pvelx = buffer_read(buffer, buffer_f32);<br> pvely = buffer_read(buffer, buffer_f32);<br> buffer_delete(buffer);
  </p>
  <p>El código anterior obtiene la posición y la velocidad de la partícula indexada por la variable &quot;part&quot; y almacena los datos en una serie de variables.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="Soft_Body_Particles.htm">Partículas de cuerpo blando</a></div>
        <div style="float:right">Siguiente: <a href="physics_particle_group_get_data.htm">physics_particle_group_get_data</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
physics_particle_get_data_particle
phy_particle_data_flag_typeflags
phy_particle_data_flag_position
phy_particle_data_flag_velocity
phy_particle_data_flag_colour
phy_particle_data_flag_category
-->
  <!-- TAGS
physics_particle_get_data_particle
-->
</body>
</html>