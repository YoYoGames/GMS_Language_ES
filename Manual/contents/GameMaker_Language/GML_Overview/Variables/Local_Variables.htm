<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Variables locales</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining local variables" />
  <meta name="rh-index-keywords" content="var,Local Variables" />
  <meta name="search-keywords" content="local variables,local,var,local scope" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Variables locales</h1>
  <p>Una variable <strong>local</strong> es aquella que creamos <i>sólo</i> para un <strong>evento</strong> o <strong>función</strong> específica y luego la descartamos cuando el evento o función ha terminado. Si se crea en una función personalizada, la variable local
    sólo está disponible para la función y luego se descarta cuando la función ha terminado. ¿Por qué las necesitamos? Bueno, las variables ocupan espacio en la memoria y puede ser que sólo las vayamos a utilizar para una operación o función en cuyo caso sólo
    necesitamos tenerla en memoria por ese corto tiempo que se usa. Esto mantiene tu base de código limpia y ordenada, además de mantener el espacio de memoria optimizado para las cosas que realmente lo necesitan. Para declarar una variable local utilizamos el operador <span class="inline"><strong><tt>var</tt></strong></span> 
    así:</p>
  <p class="code">var _i, _num, _str;<br> _i = 0;<br> _num = 24,5;<br> _str = &quot;Hello World&quot;;<br>
    <br> // o<br>
    <br> var _i = 0, _num = 24,5, _str = &quot;Hello World&quot;;<br>
    <br> // o<br>
    <br> var _i = 0;<br> var _num = 24,5;<br> var _str = &quot;Hello World&quot;;</p>
  <p>Todas las variables creadas de esta manera serán &quot;olvidadas&quot; (es decir, eliminadas de la memoria) al final del evento (o función) en el que fueron creadas. Debe tener cuidado de que el nombre que le dé a todas las variables declaradas <tt>var</tt> no coincida con otra variable de instancia dentro del objeto que ejecuta el código, ya que no se trata de una variable de instancia.
    no coincida con otra variable de instancia dentro del objeto que ejecuta el código, y también asegurarse de que no tiene intención de utilizar el valor almacenado en esa variable fuera del evento o función en el que la declara (en los ejemplos anteriores, todas las
    las variables declaradas <tt>var</tt> se han definido con el guión bajo &quot;_&quot; precediendo el nombre de la variable, pero esto no es necesario y se hace simplemente para hacer más obvio en el código que estamos tratando con una variable local). Dicho esto,
    si se encuentra en una situación en la que cree que una variable local <em>debería</em> ser la misma que una variable de instancia, puede utilizar la <a href="../Instance_Keywords.htm">palabra clave</a> <span class="inline">self</span> para identificar la variable de instancia
    como separada, por ejemplo:</p>
  <p class="code">var hp = 10;<br> with (obj_Enemigo)<br> {
    <br> self.hp -= hp;<br> }
  </p>
  <p>Las variables locales se utilizan mucho en los programas, especialmente en los bucles para contar <a class="glossterm" data-glossterm="iteración" href="#">iteraciones</a>, o cuando se utiliza un valor varias veces en una operación que no se va a
    repetirse de nuevo. Aquí hay otro par de ejemplos:</p>
  <p class="code">var _i = 0;<br> repeat (10)<br> {
    <br> inventario[_i] = 0;<br> _i += 1;<br> }
  </p>
  <p>El código anterior crea una variable local llamada &quot;<span class="inline">_i</span>&quot; y la pone a 0, todo en la misma línea. Tenga en cuenta que en las versiones anteriores de <i><span class="notranslate">GameMaker</span></i> tenías que declarar tus variables locales primero y <i>luego</i> asignarles
    valores, pero en esta versión puedes declararlas <i>y</i> asignarles un valor al mismo tiempo. El código anterior utiliza esta variable para inicializar un <a href="../Arrays.htm">array</a>. Como la variable &quot;<span class="inline">_i</span>&quot;
    no se va a utilizar para ninguna otra función en la instancia, aparte de ésta, puede ser de ámbito local. Aquí hay un ejemplo más:</p>
  <p class="code">var _x, _y;<br> _x = x - 32 + irandom(64);<br> _y = y - 32 + irandom(64);<br> instance_create_layer(_x, _y, &quot;Effects&quot;, obj_blood);</p>
  <p>Aquí hemos utilizado las variables locales &quot;<span class="inline">_x</span>&quot; y &quot;<span class="inline">_y</span>&quot; para almacenar unas coordenadas aleatorias que luego utilizamos para crear una instancia. En este ejemplo se puede ver que no es estrictamente
    necesario que utilicemos estas variables, pero en aras de la legibilidad y la facilidad de uso, lo hacemos. Es MUCHO más claro y obvio lo que estamos haciendo ahí que si usáramos este código:</p>
  <p class="code">instance_create_layer(x - 32 + irandom(64), y - 32 + irandom(64), &quot;Effects&quot;, obj_guts);</p>
  <p>Una cosa más sobre las variables locales declaradas <tt>var</tt> debe ser notada... Dado que son únicas para el evento o función que las ejecuta, ¡también pueden ser utilizadas en cualquier otra instancia a través del código! Esto significa que podemos utilizar estas variables para establecer
    y cambiar cosas en otras instancias usando la construcción &quot;<span class="inline">with()</span>&quot; (ver la sección sobre el <a href="../Variables_And_Variable_Scope.htm">ámbito de</a> las variables <a href="../Variables_And_Variable_Scope.htm">para más</a> información). El código real se vería algo así
    como este:</p>
  <p class="code">var num = instance_number(obj_Enemy);<br> with (obj_Enemy)<br> {
    <br> if num&gt;10 instance_destroy();<br> }
  </p>
  <p>El código anterior funciona porque la variable declarada <tt>var</tt> es local al <i>evento</i> (o función) en el que está contenida, no a la instancia, ni al mundo del juego, por lo que puede utilizarse en cualquier función de cualquier objeto siempre que esté en el mismo bloque de código.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Atrás: <a href="../Variables_And_Variable_Scope.htm">Variables y Ámbito de las Variables</a></div>
        <div style="float:right">Siguiente: <a href="Instance_Variables.htm">Variables de instancia</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos los derechos reservados</span></h5>
  </div>
  <!-- KEYWORDS
local variables
var
-->
  <!-- TAGS
var
local_variables
-->

</body></html>